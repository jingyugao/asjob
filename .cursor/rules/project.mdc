# chatjob 项目规则和架构说明

## 项目概述
chatjob 是一个智能任务调度和作业管理系统，提供分布式任务执行、资源管理和监控功能。

## 产品功能
- **任务调度**: 支持定时任务、依赖任务、优先级调度
- **资源管理**: 智能分配计算资源，负载均衡
- **监控告警**: 实时任务状态监控，异常告警
- **分布式执行**: 支持多节点任务分发和执行
- **日志管理**: 完整的任务执行日志和审计追踪
- **API接口**: RESTful API支持第三方系统集成

## 模块架构

### 核心模块
- **scheduler**: 任务调度引擎，负责任务队列管理和调度策略
- **executor**: 任务执行器，处理具体任务的运行和状态管理
- **resource_manager**: 资源管理器，分配和监控计算资源
- **monitor**: 监控模块，收集指标和生成告警
- **api**: Web API服务，提供HTTP接口

### 数据层
- **dao**: 数据访问对象，封装数据库操作
- **database/model**: 数据库模型定义，使用ORM映射
- **cache**: 缓存层，提升系统性能

### 配置和工具
- **config**: 配置管理，支持环境变量和配置文件
- **utils**: 通用工具函数和辅助类
- **middleware**: 中间件，处理认证、日志等横切关注点

## 技术栈
- **后端**: Python 3.9+
- **数据库**: PostgreSQL/MySQL
- **缓存**: Redis
- **消息队列**: RabbitMQ/Kafka
- **API框架**: FastAPI
- **ORM**: SQLAlchemy
- **任务调度**: Celery/APScheduler

## 开发规范
- 遵循模块化设计原则，保持模块间低耦合
- 使用依赖注入管理组件依赖
- 实现统一的错误处理和日志记录
- 编写完整的单元测试和集成测试
- 使用类型注解提升代码质量

## 部署架构
- 支持容器化部署（Docker）
- 微服务架构，支持水平扩展
- 配置中心化管理
- 健康检查和自动恢复

## 文件目录
- md文件放到doc目录中
- test文件放到backend tests目录中
- 临时文件放到tmp目录中

alwaysApply: true
description:
globs:
alwaysApply: true
---
